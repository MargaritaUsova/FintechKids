//
//  CardGameViewModelTests.swift
//  FintechKidsTests
//
//  Created by Margarita Usova on 03.04.2025.
//

import XCTest
@testable import FintechKids

final class CardGameViewModelTests: XCTestCase {

    var viewModel: CardGameViewModel!
    
    override func setUpWithError() throws {
        // Put setup code here. This method is called before the invocation of each test method in the class.
        super.setUp()
        let screenFactory = ScreenFactory()
        viewModel = CardGameViewModel(screen: .cardsGame, screenFactory: screenFactory)
    }

    override func tearDownWithError() throws {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
        viewModel = nil
        super.tearDown()
    }

    func testExample() throws {
        // This is an example of a functional test case.
        // Use XCTAssert and related functions to verify your tests produce the correct results.
        // Any test you write for XCTest can be annotated as throws and async.
        // Mark your test throws to produce an unexpected failure when your test encounters an uncaught error.
        // Mark your test async to allow awaiting for asynchronous code to complete. Check the results with assertions afterwards.
    }

    func testPerformanceExample() throws {
        // This is an example of a performance test case.
        self.measure {
            // Put the code you want to measure the time of here.
        }
    }
    
    func testIsCloseEnough() {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π —Ü–µ–Ω–æ–π
            viewModel.currentRoundCards = [CardGameRound(name: "Test Card", imageName: "test", cost: 100)]
            viewModel.currentCardIndex = 0
            
            // —á–∏—Å–ª–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 70-130 –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true
            XCTAssertTrue(viewModel.isCloseEnough(100))
            XCTAssertTrue(viewModel.isCloseEnough(130))
            XCTAssertTrue(viewModel.isCloseEnough(70))

            // —á–∏—Å–ª–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç false
            XCTAssertFalse(viewModel.isCloseEnough(69))
            XCTAssertFalse(viewModel.isCloseEnough(131))
        }

        func testGetFeedback() {
            viewModel.currentRoundCards = [CardGameRound(name: "Test Card", imageName: "test", cost: 100)]
            viewModel.currentCardIndex = 0
            
            XCTAssertEqual(viewModel.getFeedback(for: 100), "–ü–æ—á—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: 100")
            XCTAssertEqual(viewModel.getFeedback(for: 130), "–ü–æ—á—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: 100")
            XCTAssertEqual(viewModel.getFeedback(for: 70), "–ü–æ—á—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: 100")
            
            XCTAssertEqual(viewModel.getFeedback(for: 140), "–°–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥–æ! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            XCTAssertEqual(viewModel.getFeedback(for: 60), "–°–ª–∏—à–∫–æ–º –¥–µ—à–µ–≤–æ! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        }

}
